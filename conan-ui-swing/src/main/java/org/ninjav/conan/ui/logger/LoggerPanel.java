/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ninjav.conan.ui.logger;

import org.ninjav.conan.logger.Logger;

import java.awt.Color;
import java.util.logging.Level;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author ninjav
 */
public class LoggerPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoggerPanel
     */
    public LoggerPanel() {
        initComponents();
        initStyles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loggerScrollPane = new javax.swing.JScrollPane();
        loggerTextPane = new javax.swing.JTextPane();

        loggerScrollPane.setViewportView(loggerTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loggerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loggerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane loggerScrollPane;
    private javax.swing.JTextPane loggerTextPane;
    // End of variables declaration//GEN-END:variables

    private void initStyles() {
        StyledDocument doc = loggerTextPane.getStyledDocument();
        
        Style style = doc.addStyle("default", null);
        style.addAttribute(StyleConstants.Foreground, Color.black);

        style = doc.addStyle("date", null);
        style.addAttribute(StyleConstants.Foreground, Color.black);
        
        style = doc.addStyle("error", null);
        style.addAttribute(StyleConstants.Foreground, Color.red);
        
        style = doc.addStyle("info", null);
        style.addAttribute(StyleConstants.Foreground, Color.blue);
        
        style = doc.addStyle("success", null);
        style.addAttribute(StyleConstants.Foreground, Color.green);
    }
    
    public void log(Logger.LogLevel level, String date, String line) {
        switch(level) {
            case ERROR:
                logError(date, line);
                break;
            case INFO:
                logInfo(date, line);
                break;
            case SUCCESS:
                logSuccess(date, line);
                break;
        }
    }

    private void logError(String date, String message) {
        logMessage("error", date, message);
    }

    private void logInfo(String date, String message) {
        logMessage("info", date, message);
    }

    private void logSuccess(String date, String message) {
        logMessage("success", date, message);
    }

    private void logDefault(String date, String message) {
        logMessage("default", date, message);
    }
    
    private void logMessage(String styleName, String date, String message) {
        try {
            StyledDocument doc = loggerTextPane.getStyledDocument();
            
            doc.insertString(doc.getLength(), "[" + date + "] ", doc.getStyle("date"));
            doc.insertString(doc.getLength(), " ", doc.getStyle("default"));
            doc.insertString(doc.getLength(), message, doc.getStyle(styleName));
            doc.insertString(doc.getLength(), "\n", doc.getStyle("default"));
            
        } catch (BadLocationException ex) {
            java.util.logging.Logger.getLogger(LoggerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
