/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ninjav.conan.ui.recoverer;

import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.ninjav.conan.debitorder.PresentableRecoveryWorkflow;
import org.ninjav.conan.ui.renderer.CurrencyCellRenderer;
import org.ninjav.conan.ui.renderer.DateCellRenderer;

/**
 *
 * @author ninjav
 */
public class RecoveryPanel extends javax.swing.JPanel {

    private DefaultTableModel recoveryWorkflowModel = null;

    /**
     * Creates new form RecovererPanel
     */
    public RecoveryPanel() {
        initComponents();
        recoveryWorkflowTable.getColumnModel().getColumn(2).setCellRenderer(new DateCellRenderer());
        recoveryWorkflowTable.getColumnModel().getColumn(3).setCellRenderer(new CurrencyCellRenderer());

        recoveryWorkflowModel = (DefaultTableModel) recoveryWorkflowTable.getModel();
        disableWorkflowControls();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        newCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        handedOverCheck = new javax.swing.JCheckBox();
        recoveredCheck = new javax.swing.JCheckBox();
        writtenOffCheck = new javax.swing.JCheckBox();
        handOverButton = new javax.swing.JButton();
        recoverButton = new javax.swing.JButton();
        writeOffButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        recoveryWorkflowTable = new javax.swing.JTable();

        newCheck.setText("New");
        newCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCheckActionPerformed(evt);
            }
        });

        jLabel1.setText("Show items that are");

        handedOverCheck.setText("Handed Over");
        handedOverCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handedOverCheckActionPerformed(evt);
            }
        });

        recoveredCheck.setText("Recovered");

        writtenOffCheck.setText("Written off");

        handOverButton.setText("Hand Over");

        recoverButton.setText("Recover");

        writeOffButton.setText("Write off");

        resetButton.setText("Reset");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(newCheck)
                .addGap(18, 18, 18)
                .addComponent(handedOverCheck)
                .addGap(18, 18, 18)
                .addComponent(recoveredCheck)
                .addGap(18, 18, 18)
                .addComponent(writtenOffCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(resetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(handOverButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recoverButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(writeOffButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newCheck)
                    .addComponent(jLabel1)
                    .addComponent(handedOverCheck)
                    .addComponent(recoveredCheck)
                    .addComponent(writtenOffCheck)
                    .addComponent(handOverButton)
                    .addComponent(recoverButton)
                    .addComponent(writeOffButton)
                    .addComponent(resetButton))
                .addContainerGap())
        );

        recoveryWorkflowTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Account Ref", "Transaction ID", "Date", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Object.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        recoveryWorkflowTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(recoveryWorkflowTable);
        recoveryWorkflowTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newCheckActionPerformed

    private void handedOverCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handedOverCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_handedOverCheckActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton handOverButton;
    private javax.swing.JCheckBox handedOverCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox newCheck;
    private javax.swing.JButton recoverButton;
    private javax.swing.JCheckBox recoveredCheck;
    private javax.swing.JTable recoveryWorkflowTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton writeOffButton;
    private javax.swing.JCheckBox writtenOffCheck;
    // End of variables declaration//GEN-END:variables

    public void reset() {
        clearRecoveryWorkflows();
    }

    public JCheckBox getNewCheckBox() {
        return newCheck;
    }

    public JCheckBox getHandedOverCheckBox() {
        return handedOverCheck;
    }

    public JCheckBox getRecoveredCheckBox() {
        return recoveredCheck;
    }

    public JCheckBox getWrittenOffCheckBox() {
        return writtenOffCheck;
    }
    
    public JButton getResetButton() {
        return resetButton;
    }
    
    public JButton getHandOverButton() {
        return handOverButton;
    }
    
    public JButton getRecoverButton() {
        return recoverButton;
    }
    
    public JButton getWriteOffButton() {
        return writeOffButton;
    }

    public ListSelectionModel getSelectionModel() {
        return recoveryWorkflowTable.getSelectionModel();
    }

    public DefaultTableModel getTableModel() {
        return recoveryWorkflowModel;
    }

    public int[] getSelectedRows() {
        return recoveryWorkflowTable.getSelectedRows();
    }

    public void clearRecoveryWorkflows() {
        recoveryWorkflowModel.setRowCount(0);
    }

    public void addRecoveryWorkflow(PresentableRecoveryWorkflow recovery) {
        recoveryWorkflowModel.addRow(new Object[]{
            "TODO",
            recovery.debitOrder.transactionId,
            recovery.debitOrder.date,
            recovery.debitOrder.amount,
            recovery.status
        });
    }

    public void addRecoveryWorkflows(List<PresentableRecoveryWorkflow> recoveries) {
        for (PresentableRecoveryWorkflow r : recoveries) {
            addRecoveryWorkflow(r);
        }
    }

    public void disableWorkflowControls() {
        resetButton.setEnabled(false);
        handOverButton.setEnabled(false);
        recoverButton.setEnabled(false);
        writeOffButton.setEnabled(false);
    }

    public void enableWorkflowControls() {
        resetButton.setEnabled(true);
        handOverButton.setEnabled(true);
        recoverButton.setEnabled(true);
        writeOffButton.setEnabled(true);
    }
}
